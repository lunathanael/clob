// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: market.proto

#include "market.pb.h"
#include "market.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace marketmaker {

static const char* MarketMaker_method_names[] = {
  "/marketmaker.MarketMaker/PlaceOrder",
  "/marketmaker.MarketMaker/GetOrderStatus",
  "/marketmaker.MarketMaker/CancelOrder",
};

std::unique_ptr< MarketMaker::Stub> MarketMaker::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MarketMaker::Stub> stub(new MarketMaker::Stub(channel, options));
  return stub;
}

MarketMaker::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_PlaceOrder_(MarketMaker_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOrderStatus_(MarketMaker_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CancelOrder_(MarketMaker_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MarketMaker::Stub::PlaceOrder(::grpc::ClientContext* context, const ::marketmaker::PlaceOrderRequest& request, ::marketmaker::LimitOrderId* response) {
  return ::grpc::internal::BlockingUnaryCall< ::marketmaker::PlaceOrderRequest, ::marketmaker::LimitOrderId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PlaceOrder_, context, request, response);
}

void MarketMaker::Stub::async::PlaceOrder(::grpc::ClientContext* context, const ::marketmaker::PlaceOrderRequest* request, ::marketmaker::LimitOrderId* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::marketmaker::PlaceOrderRequest, ::marketmaker::LimitOrderId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PlaceOrder_, context, request, response, std::move(f));
}

void MarketMaker::Stub::async::PlaceOrder(::grpc::ClientContext* context, const ::marketmaker::PlaceOrderRequest* request, ::marketmaker::LimitOrderId* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PlaceOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::marketmaker::LimitOrderId>* MarketMaker::Stub::PrepareAsyncPlaceOrderRaw(::grpc::ClientContext* context, const ::marketmaker::PlaceOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::marketmaker::LimitOrderId, ::marketmaker::PlaceOrderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PlaceOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::marketmaker::LimitOrderId>* MarketMaker::Stub::AsyncPlaceOrderRaw(::grpc::ClientContext* context, const ::marketmaker::PlaceOrderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPlaceOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MarketMaker::Stub::GetOrderStatus(::grpc::ClientContext* context, const ::marketmaker::GetOrderRequest& request, ::marketmaker::LimitOrderInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::marketmaker::GetOrderRequest, ::marketmaker::LimitOrderInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOrderStatus_, context, request, response);
}

void MarketMaker::Stub::async::GetOrderStatus(::grpc::ClientContext* context, const ::marketmaker::GetOrderRequest* request, ::marketmaker::LimitOrderInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::marketmaker::GetOrderRequest, ::marketmaker::LimitOrderInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOrderStatus_, context, request, response, std::move(f));
}

void MarketMaker::Stub::async::GetOrderStatus(::grpc::ClientContext* context, const ::marketmaker::GetOrderRequest* request, ::marketmaker::LimitOrderInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOrderStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::marketmaker::LimitOrderInfo>* MarketMaker::Stub::PrepareAsyncGetOrderStatusRaw(::grpc::ClientContext* context, const ::marketmaker::GetOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::marketmaker::LimitOrderInfo, ::marketmaker::GetOrderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOrderStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::marketmaker::LimitOrderInfo>* MarketMaker::Stub::AsyncGetOrderStatusRaw(::grpc::ClientContext* context, const ::marketmaker::GetOrderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOrderStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MarketMaker::Stub::CancelOrder(::grpc::ClientContext* context, const ::marketmaker::CancelOrderRequest& request, ::marketmaker::CancelOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::marketmaker::CancelOrderRequest, ::marketmaker::CancelOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CancelOrder_, context, request, response);
}

void MarketMaker::Stub::async::CancelOrder(::grpc::ClientContext* context, const ::marketmaker::CancelOrderRequest* request, ::marketmaker::CancelOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::marketmaker::CancelOrderRequest, ::marketmaker::CancelOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelOrder_, context, request, response, std::move(f));
}

void MarketMaker::Stub::async::CancelOrder(::grpc::ClientContext* context, const ::marketmaker::CancelOrderRequest* request, ::marketmaker::CancelOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::marketmaker::CancelOrderResponse>* MarketMaker::Stub::PrepareAsyncCancelOrderRaw(::grpc::ClientContext* context, const ::marketmaker::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::marketmaker::CancelOrderResponse, ::marketmaker::CancelOrderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CancelOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::marketmaker::CancelOrderResponse>* MarketMaker::Stub::AsyncCancelOrderRaw(::grpc::ClientContext* context, const ::marketmaker::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCancelOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

MarketMaker::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MarketMaker_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MarketMaker::Service, ::marketmaker::PlaceOrderRequest, ::marketmaker::LimitOrderId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MarketMaker::Service* service,
             ::grpc::ServerContext* ctx,
             const ::marketmaker::PlaceOrderRequest* req,
             ::marketmaker::LimitOrderId* resp) {
               return service->PlaceOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MarketMaker_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MarketMaker::Service, ::marketmaker::GetOrderRequest, ::marketmaker::LimitOrderInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MarketMaker::Service* service,
             ::grpc::ServerContext* ctx,
             const ::marketmaker::GetOrderRequest* req,
             ::marketmaker::LimitOrderInfo* resp) {
               return service->GetOrderStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MarketMaker_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MarketMaker::Service, ::marketmaker::CancelOrderRequest, ::marketmaker::CancelOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MarketMaker::Service* service,
             ::grpc::ServerContext* ctx,
             const ::marketmaker::CancelOrderRequest* req,
             ::marketmaker::CancelOrderResponse* resp) {
               return service->CancelOrder(ctx, req, resp);
             }, this)));
}

MarketMaker::Service::~Service() {
}

::grpc::Status MarketMaker::Service::PlaceOrder(::grpc::ServerContext* context, const ::marketmaker::PlaceOrderRequest* request, ::marketmaker::LimitOrderId* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MarketMaker::Service::GetOrderStatus(::grpc::ServerContext* context, const ::marketmaker::GetOrderRequest* request, ::marketmaker::LimitOrderInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MarketMaker::Service::CancelOrder(::grpc::ServerContext* context, const ::marketmaker::CancelOrderRequest* request, ::marketmaker::CancelOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace marketmaker
#include <grpcpp/ports_undef.inc>

