// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: market.proto
// Original file comments:
// *
// @page copyright
// Copyright(c) 2025-present, Nathanael Lu.
// Distributed under the MIT License (http://opensource.org/licenses/MIT)
//
#ifndef GRPC_market_2eproto__INCLUDED
#define GRPC_market_2eproto__INCLUDED

#include "market.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace marketmaker {

// Interface exported by the server.
class MarketMaker final {
 public:
  static constexpr char const* service_full_name() {
    return "marketmaker.MarketMaker";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // A server-to-client streaming RPC.
    //
    // Places an order in the Order Book
    virtual ::grpc::Status PlaceOrder(::grpc::ClientContext* context, const ::marketmaker::PlaceOrderRequest& request, ::marketmaker::LimitOrderId* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketmaker::LimitOrderId>> AsyncPlaceOrder(::grpc::ClientContext* context, const ::marketmaker::PlaceOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketmaker::LimitOrderId>>(AsyncPlaceOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketmaker::LimitOrderId>> PrepareAsyncPlaceOrder(::grpc::ClientContext* context, const ::marketmaker::PlaceOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketmaker::LimitOrderId>>(PrepareAsyncPlaceOrderRaw(context, request, cq));
    }
    // Obtains the current information on an order.
    //
    // An empty message with `order_found` set to false is returned
    // if no order was found with `LimitOrderId`.
    virtual ::grpc::Status GetOrderStatus(::grpc::ClientContext* context, const ::marketmaker::GetOrderRequest& request, ::marketmaker::LimitOrderInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketmaker::LimitOrderInfo>> AsyncGetOrderStatus(::grpc::ClientContext* context, const ::marketmaker::GetOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketmaker::LimitOrderInfo>>(AsyncGetOrderStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketmaker::LimitOrderInfo>> PrepareAsyncGetOrderStatus(::grpc::ClientContext* context, const ::marketmaker::GetOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketmaker::LimitOrderInfo>>(PrepareAsyncGetOrderStatusRaw(context, request, cq));
    }
    // Attempts to cancel an ongoing order
    virtual ::grpc::Status CancelOrder(::grpc::ClientContext* context, const ::marketmaker::CancelOrderRequest& request, ::marketmaker::CancelOrderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketmaker::CancelOrderResponse>> AsyncCancelOrder(::grpc::ClientContext* context, const ::marketmaker::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketmaker::CancelOrderResponse>>(AsyncCancelOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketmaker::CancelOrderResponse>> PrepareAsyncCancelOrder(::grpc::ClientContext* context, const ::marketmaker::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::marketmaker::CancelOrderResponse>>(PrepareAsyncCancelOrderRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // A server-to-client streaming RPC.
      //
      // Places an order in the Order Book
      virtual void PlaceOrder(::grpc::ClientContext* context, const ::marketmaker::PlaceOrderRequest* request, ::marketmaker::LimitOrderId* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PlaceOrder(::grpc::ClientContext* context, const ::marketmaker::PlaceOrderRequest* request, ::marketmaker::LimitOrderId* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Obtains the current information on an order.
      //
      // An empty message with `order_found` set to false is returned
      // if no order was found with `LimitOrderId`.
      virtual void GetOrderStatus(::grpc::ClientContext* context, const ::marketmaker::GetOrderRequest* request, ::marketmaker::LimitOrderInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetOrderStatus(::grpc::ClientContext* context, const ::marketmaker::GetOrderRequest* request, ::marketmaker::LimitOrderInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Attempts to cancel an ongoing order
      virtual void CancelOrder(::grpc::ClientContext* context, const ::marketmaker::CancelOrderRequest* request, ::marketmaker::CancelOrderResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CancelOrder(::grpc::ClientContext* context, const ::marketmaker::CancelOrderRequest* request, ::marketmaker::CancelOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marketmaker::LimitOrderId>* AsyncPlaceOrderRaw(::grpc::ClientContext* context, const ::marketmaker::PlaceOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marketmaker::LimitOrderId>* PrepareAsyncPlaceOrderRaw(::grpc::ClientContext* context, const ::marketmaker::PlaceOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marketmaker::LimitOrderInfo>* AsyncGetOrderStatusRaw(::grpc::ClientContext* context, const ::marketmaker::GetOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marketmaker::LimitOrderInfo>* PrepareAsyncGetOrderStatusRaw(::grpc::ClientContext* context, const ::marketmaker::GetOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marketmaker::CancelOrderResponse>* AsyncCancelOrderRaw(::grpc::ClientContext* context, const ::marketmaker::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::marketmaker::CancelOrderResponse>* PrepareAsyncCancelOrderRaw(::grpc::ClientContext* context, const ::marketmaker::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status PlaceOrder(::grpc::ClientContext* context, const ::marketmaker::PlaceOrderRequest& request, ::marketmaker::LimitOrderId* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketmaker::LimitOrderId>> AsyncPlaceOrder(::grpc::ClientContext* context, const ::marketmaker::PlaceOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketmaker::LimitOrderId>>(AsyncPlaceOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketmaker::LimitOrderId>> PrepareAsyncPlaceOrder(::grpc::ClientContext* context, const ::marketmaker::PlaceOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketmaker::LimitOrderId>>(PrepareAsyncPlaceOrderRaw(context, request, cq));
    }
    ::grpc::Status GetOrderStatus(::grpc::ClientContext* context, const ::marketmaker::GetOrderRequest& request, ::marketmaker::LimitOrderInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketmaker::LimitOrderInfo>> AsyncGetOrderStatus(::grpc::ClientContext* context, const ::marketmaker::GetOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketmaker::LimitOrderInfo>>(AsyncGetOrderStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketmaker::LimitOrderInfo>> PrepareAsyncGetOrderStatus(::grpc::ClientContext* context, const ::marketmaker::GetOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketmaker::LimitOrderInfo>>(PrepareAsyncGetOrderStatusRaw(context, request, cq));
    }
    ::grpc::Status CancelOrder(::grpc::ClientContext* context, const ::marketmaker::CancelOrderRequest& request, ::marketmaker::CancelOrderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketmaker::CancelOrderResponse>> AsyncCancelOrder(::grpc::ClientContext* context, const ::marketmaker::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketmaker::CancelOrderResponse>>(AsyncCancelOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketmaker::CancelOrderResponse>> PrepareAsyncCancelOrder(::grpc::ClientContext* context, const ::marketmaker::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::marketmaker::CancelOrderResponse>>(PrepareAsyncCancelOrderRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void PlaceOrder(::grpc::ClientContext* context, const ::marketmaker::PlaceOrderRequest* request, ::marketmaker::LimitOrderId* response, std::function<void(::grpc::Status)>) override;
      void PlaceOrder(::grpc::ClientContext* context, const ::marketmaker::PlaceOrderRequest* request, ::marketmaker::LimitOrderId* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetOrderStatus(::grpc::ClientContext* context, const ::marketmaker::GetOrderRequest* request, ::marketmaker::LimitOrderInfo* response, std::function<void(::grpc::Status)>) override;
      void GetOrderStatus(::grpc::ClientContext* context, const ::marketmaker::GetOrderRequest* request, ::marketmaker::LimitOrderInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CancelOrder(::grpc::ClientContext* context, const ::marketmaker::CancelOrderRequest* request, ::marketmaker::CancelOrderResponse* response, std::function<void(::grpc::Status)>) override;
      void CancelOrder(::grpc::ClientContext* context, const ::marketmaker::CancelOrderRequest* request, ::marketmaker::CancelOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::marketmaker::LimitOrderId>* AsyncPlaceOrderRaw(::grpc::ClientContext* context, const ::marketmaker::PlaceOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marketmaker::LimitOrderId>* PrepareAsyncPlaceOrderRaw(::grpc::ClientContext* context, const ::marketmaker::PlaceOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marketmaker::LimitOrderInfo>* AsyncGetOrderStatusRaw(::grpc::ClientContext* context, const ::marketmaker::GetOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marketmaker::LimitOrderInfo>* PrepareAsyncGetOrderStatusRaw(::grpc::ClientContext* context, const ::marketmaker::GetOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marketmaker::CancelOrderResponse>* AsyncCancelOrderRaw(::grpc::ClientContext* context, const ::marketmaker::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::marketmaker::CancelOrderResponse>* PrepareAsyncCancelOrderRaw(::grpc::ClientContext* context, const ::marketmaker::CancelOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_PlaceOrder_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOrderStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_CancelOrder_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // A server-to-client streaming RPC.
    //
    // Places an order in the Order Book
    virtual ::grpc::Status PlaceOrder(::grpc::ServerContext* context, const ::marketmaker::PlaceOrderRequest* request, ::marketmaker::LimitOrderId* response);
    // Obtains the current information on an order.
    //
    // An empty message with `order_found` set to false is returned
    // if no order was found with `LimitOrderId`.
    virtual ::grpc::Status GetOrderStatus(::grpc::ServerContext* context, const ::marketmaker::GetOrderRequest* request, ::marketmaker::LimitOrderInfo* response);
    // Attempts to cancel an ongoing order
    virtual ::grpc::Status CancelOrder(::grpc::ServerContext* context, const ::marketmaker::CancelOrderRequest* request, ::marketmaker::CancelOrderResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_PlaceOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PlaceOrder() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_PlaceOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlaceOrder(::grpc::ServerContext* /*context*/, const ::marketmaker::PlaceOrderRequest* /*request*/, ::marketmaker::LimitOrderId* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPlaceOrder(::grpc::ServerContext* context, ::marketmaker::PlaceOrderRequest* request, ::grpc::ServerAsyncResponseWriter< ::marketmaker::LimitOrderId>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOrderStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetOrderStatus() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetOrderStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrderStatus(::grpc::ServerContext* /*context*/, const ::marketmaker::GetOrderRequest* /*request*/, ::marketmaker::LimitOrderInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOrderStatus(::grpc::ServerContext* context, ::marketmaker::GetOrderRequest* request, ::grpc::ServerAsyncResponseWriter< ::marketmaker::LimitOrderInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CancelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CancelOrder() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CancelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelOrder(::grpc::ServerContext* /*context*/, const ::marketmaker::CancelOrderRequest* /*request*/, ::marketmaker::CancelOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelOrder(::grpc::ServerContext* context, ::marketmaker::CancelOrderRequest* request, ::grpc::ServerAsyncResponseWriter< ::marketmaker::CancelOrderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_PlaceOrder<WithAsyncMethod_GetOrderStatus<WithAsyncMethod_CancelOrder<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_PlaceOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PlaceOrder() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::marketmaker::PlaceOrderRequest, ::marketmaker::LimitOrderId>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::marketmaker::PlaceOrderRequest* request, ::marketmaker::LimitOrderId* response) { return this->PlaceOrder(context, request, response); }));}
    void SetMessageAllocatorFor_PlaceOrder(
        ::grpc::MessageAllocator< ::marketmaker::PlaceOrderRequest, ::marketmaker::LimitOrderId>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::marketmaker::PlaceOrderRequest, ::marketmaker::LimitOrderId>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PlaceOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlaceOrder(::grpc::ServerContext* /*context*/, const ::marketmaker::PlaceOrderRequest* /*request*/, ::marketmaker::LimitOrderId* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PlaceOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::marketmaker::PlaceOrderRequest* /*request*/, ::marketmaker::LimitOrderId* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetOrderStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetOrderStatus() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::marketmaker::GetOrderRequest, ::marketmaker::LimitOrderInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::marketmaker::GetOrderRequest* request, ::marketmaker::LimitOrderInfo* response) { return this->GetOrderStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetOrderStatus(
        ::grpc::MessageAllocator< ::marketmaker::GetOrderRequest, ::marketmaker::LimitOrderInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::marketmaker::GetOrderRequest, ::marketmaker::LimitOrderInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetOrderStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrderStatus(::grpc::ServerContext* /*context*/, const ::marketmaker::GetOrderRequest* /*request*/, ::marketmaker::LimitOrderInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetOrderStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::marketmaker::GetOrderRequest* /*request*/, ::marketmaker::LimitOrderInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CancelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CancelOrder() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::marketmaker::CancelOrderRequest, ::marketmaker::CancelOrderResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::marketmaker::CancelOrderRequest* request, ::marketmaker::CancelOrderResponse* response) { return this->CancelOrder(context, request, response); }));}
    void SetMessageAllocatorFor_CancelOrder(
        ::grpc::MessageAllocator< ::marketmaker::CancelOrderRequest, ::marketmaker::CancelOrderResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::marketmaker::CancelOrderRequest, ::marketmaker::CancelOrderResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CancelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelOrder(::grpc::ServerContext* /*context*/, const ::marketmaker::CancelOrderRequest* /*request*/, ::marketmaker::CancelOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CancelOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::marketmaker::CancelOrderRequest* /*request*/, ::marketmaker::CancelOrderResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_PlaceOrder<WithCallbackMethod_GetOrderStatus<WithCallbackMethod_CancelOrder<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_PlaceOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PlaceOrder() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_PlaceOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlaceOrder(::grpc::ServerContext* /*context*/, const ::marketmaker::PlaceOrderRequest* /*request*/, ::marketmaker::LimitOrderId* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOrderStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetOrderStatus() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetOrderStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrderStatus(::grpc::ServerContext* /*context*/, const ::marketmaker::GetOrderRequest* /*request*/, ::marketmaker::LimitOrderInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CancelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CancelOrder() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CancelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelOrder(::grpc::ServerContext* /*context*/, const ::marketmaker::CancelOrderRequest* /*request*/, ::marketmaker::CancelOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_PlaceOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PlaceOrder() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_PlaceOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlaceOrder(::grpc::ServerContext* /*context*/, const ::marketmaker::PlaceOrderRequest* /*request*/, ::marketmaker::LimitOrderId* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPlaceOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOrderStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetOrderStatus() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetOrderStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrderStatus(::grpc::ServerContext* /*context*/, const ::marketmaker::GetOrderRequest* /*request*/, ::marketmaker::LimitOrderInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOrderStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CancelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CancelOrder() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CancelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelOrder(::grpc::ServerContext* /*context*/, const ::marketmaker::CancelOrderRequest* /*request*/, ::marketmaker::CancelOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PlaceOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PlaceOrder() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PlaceOrder(context, request, response); }));
    }
    ~WithRawCallbackMethod_PlaceOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlaceOrder(::grpc::ServerContext* /*context*/, const ::marketmaker::PlaceOrderRequest* /*request*/, ::marketmaker::LimitOrderId* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PlaceOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetOrderStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetOrderStatus() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetOrderStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetOrderStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrderStatus(::grpc::ServerContext* /*context*/, const ::marketmaker::GetOrderRequest* /*request*/, ::marketmaker::LimitOrderInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetOrderStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CancelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CancelOrder() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CancelOrder(context, request, response); }));
    }
    ~WithRawCallbackMethod_CancelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelOrder(::grpc::ServerContext* /*context*/, const ::marketmaker::CancelOrderRequest* /*request*/, ::marketmaker::CancelOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CancelOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PlaceOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PlaceOrder() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::marketmaker::PlaceOrderRequest, ::marketmaker::LimitOrderId>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::marketmaker::PlaceOrderRequest, ::marketmaker::LimitOrderId>* streamer) {
                       return this->StreamedPlaceOrder(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PlaceOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PlaceOrder(::grpc::ServerContext* /*context*/, const ::marketmaker::PlaceOrderRequest* /*request*/, ::marketmaker::LimitOrderId* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPlaceOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::marketmaker::PlaceOrderRequest,::marketmaker::LimitOrderId>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOrderStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetOrderStatus() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::marketmaker::GetOrderRequest, ::marketmaker::LimitOrderInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::marketmaker::GetOrderRequest, ::marketmaker::LimitOrderInfo>* streamer) {
                       return this->StreamedGetOrderStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetOrderStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOrderStatus(::grpc::ServerContext* /*context*/, const ::marketmaker::GetOrderRequest* /*request*/, ::marketmaker::LimitOrderInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOrderStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::marketmaker::GetOrderRequest,::marketmaker::LimitOrderInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CancelOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CancelOrder() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::marketmaker::CancelOrderRequest, ::marketmaker::CancelOrderResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::marketmaker::CancelOrderRequest, ::marketmaker::CancelOrderResponse>* streamer) {
                       return this->StreamedCancelOrder(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CancelOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CancelOrder(::grpc::ServerContext* /*context*/, const ::marketmaker::CancelOrderRequest* /*request*/, ::marketmaker::CancelOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCancelOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::marketmaker::CancelOrderRequest,::marketmaker::CancelOrderResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_PlaceOrder<WithStreamedUnaryMethod_GetOrderStatus<WithStreamedUnaryMethod_CancelOrder<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_PlaceOrder<WithStreamedUnaryMethod_GetOrderStatus<WithStreamedUnaryMethod_CancelOrder<Service > > > StreamedService;
};

}  // namespace marketmaker


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_market_2eproto__INCLUDED
